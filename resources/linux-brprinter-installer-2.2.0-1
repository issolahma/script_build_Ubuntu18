#! /bin/bash
#
# Copyright(c) 2011-2017 Brother Industries, Ltd.  
#    All Rights Reserved.
#


DEBUG_MSG=0
MSG=1


COLOR='\033[1;31m'
COLOR2='\033[1;35m'
COLOR3='\033[1;32m'
COLOR4='\033[1;34m'
MONO='\033[1;0m'

if [ "$(echo $0 | grep  linux-brjprinter-installer)" = '' ];then
  MESSAGE010="USAGE:  "
  MESSAGE012="     :  "
  MESSAGE020="  model"
  MESSAGE030="   -f model"
  MESSAGE040="   -l "
  MESSAGE050="Only root can perform this operation."
  MESSAGE060="CUPS is not installed."
  MESSAGE070="Do you want to specify a PROXY server? [y/N] ->"
  MESSAGE080="Enter the URL of the PROXY server."
  MESSAGE090="   ex http://(proxy-server-url):(port)"
  MESSAGE100="   ex http://(login-name):(password)@(proxy-server-url):(port)"
  MESSAGE110="     ->"
  MESSAGE120="Unable to get the server information."\
"  Please check the network settings."
  MESSAGE121="Printer model name ->"
  MESSAGE122="Rpm or dpkg is required."
  MESSAGE130="Driver-packages cannot be found."
  MESSAGE140=" Confirm the model name."
  MESSAGE150="You are going to install  following packages."
  MESSAGE160="OK? [y/N]  ->"
  MESSAGE165="OK? [Y/n]  ->"
  MESSAGE170="Do you agree? [Y/n] ->"
  MESSAGE180="Do you agree? [Y/n] ->"
  MESSAGE182="The security level of SELinux has been temporarily lowered "\
"to enable the test print."\
"  To set it permanently, modify the SELinux configuration file."
  MESSAGE184="The security level of AppArmor has been lowered."\
"  (aa-complain cups)"
  MESSAGE190="Will you specify the Device URI (network printer)? [Y/n] ->"
  MESSAGE200="Specify IP address."
  MESSAGE201="Auto."
  MESSAGE210="select the number of destination Device URI. ->"
  MESSAGE220="  enter IP address ->"
  MESSAGE230="Test Print? [y/N] ->"
  MESSAGE240="Hit Enter/Return key."
  MESSAGE250="csh/tcsh is required"
  MESSAGE260="The security level of SELinux has been lowered."\
" (semanage permissive -a cupsd_t)"
  MESSAGE270="glibc.i686/libstdc++ is requored."\
  MESSAGE280="wget is required."
else
  MESSAGE010="使用方法:  "
  MESSAGE012="　　　　:  "
  MESSAGE020="  モデル名"
  MESSAGE030="   -f モデル名"
  MESSAGE040="   -l "
  MESSAGE050="権限がありません。suもしくはsudoコマンドでroot権限を取得してください。"
  MESSAGE060="CUPSがインストールされていません。"
  MESSAGE070="WEBより情報を取得できません。PROXYサーバーを指定しますか? [y/N] ->"
  MESSAGE080="PROXYサーバーのURLを入力してください。"
  MESSAGE090="   例1 http://(proxy-server-url):(port)"
  MESSAGE100="   例2 http://(login-name):(pass-word)@(proxy-server-url):(port)"
  MESSAGE110="     ->"
  MESSAGE120="インターネットに接続できません。ネットワーク設定を確認してください。"
  MESSAGE121="モデル名を入力してください。->"
  MESSAGE122="rpmもしくはdpkgが必要です。"
  MESSAGE130="該当するドライバパッケージが見つかりません。"
  MESSAGE140="　　モデル名を確認してください。"
  MESSAGE150="以下のパッケージが見付かりました。"
  MESSAGE160="インストールしますか? [y/N]  ->"
  MESSAGE165="インストールしますか? [Y/n]  ->"
  MESSAGE170="上記使用許諾に同意しますか? [Y/n] ->"
  MESSAGE180="上記使用許諾に同意しますか? [Y/n] ->"
  MESSAGE182="一時的にSELinuxのセキュリティレベルを下げました。恒久対策としてCUPSのセキュリティレベルをpermissiveにしてください。"
  MESSAGE184="AppArmorのCUPSに対するセキュリティレベルを下げました (aa-complain cups)。"
  MESSAGE190="Device URIを指定しますか? [Y/n] ->"
  MESSAGE200="IPアドレスの指定"
  MESSAGE201="自動設定"
  MESSAGE210="使用するDevice URIの番号を選択してください。 ->"
  MESSAGE220="  ご使用のプリンタ/MFCのIPアドレスを指定してください。->"
  MESSAGE230="テスト印刷を実行しますか? [y/N] ->"
  MESSAGE240="Enterキーを押してください。"
  MESSAGE250="csh/tcsh が必要です。"
  MESSAGE260="SELinuxのCUPSに対するセキュリティレベルを下げました。"\
" (semanage permissive -a cupsd_t)"
  MESSAGE270="32bitライブラリ（glibc.i686/libstdc++）が必要です 。"\
  MESSAGE280="'wget'が必要です。"
fi

if [ -e "$0".rc ];then
  source "$0".rc
fi

TIMEOUT=30


WGET_OP="-T 10 -nd"
WGET_OP2="-nd -T 10 -t 1"

DBG_MSG(){
  if [ "$DEBUG_MSG" = 1 ];then
     echo -e ${COLOR3}"DEBUGMSG : $1"${MONO}
  fi
}

MESSAGE(){
  if [ "$MSG" = 1 ];then
     echo -e ${COLOR3}"$1"${MONO}
  fi
}

install_done=no
preproc_done=''
postproc_done=''
PREPROC=''
POSTPROC=''

pre_install_sweep(){
  DBG_MSG pre_install_sweep
  ORGC="/etc/init.d/cups"
  ORGL="/etc/init.d/lpd"
  ORGLN="/etc/init.d/lprng"
  SYMLNC="cups -> /etc/init.d/cupsys"
  SYMLNL="lpd -> /etc/init.d/cupsys"
  SYMLNLN="lprng -> /etc/init.d/cupsys"
  
  if [ "$(ls -al $ORGC  2> /dev/null | grep ^l | grep "$SYMLNC" )" != '' ] 
  then 
    rm -f $ORGC   2> /dev/null
  fi
  if [ "$(ls -al $ORGL  2> /dev/null | grep ^l | grep "$SYMLNL" )" != '' ]
  then 
    rm -f $ORGL   2> /dev/null
  fi
  if [ "$(ls -al $ORGLN  2> /dev/null | grep ^l | grep "$SYMLNLN")" != '' ]
  then 
    rm -f $ORGLN   2> /dev/null
  fi
}

post_install_sweep(){
  DBG_MSG post_install_sweep
    if [ ! -d ${wkdir}/${modelnhuc} ];then
      if [ -f ${wkdir}/${modelnhuc} ];then
         rm -f  ${wkdir}/${modelnhuc}   2> /dev/null
      fi
    fi
}


#
#  get inf file
#    chaged values :
#      ${modelnhuc}
#      ${fulpath}
#
get_inf_file(){
  SUFFIX1="N C D DN DW DWN DWT CN CW CDN CD CDW CDWT DNLT JN J CLN CLWN WR"
  DBG_MSG get_inf_file

  if [ $NODOWNLOAD = 1 ];then
    cp  $INFPATH  ${wkdir}
    modelnhuc=$MODEL
  elif [ $NODOWNLOAD = 2 ];then
    modelnhuc=$MODEL
  else

    inputmodel=$1
    modelnhuc=$(echo $inputmodel | tr "[a-z]" "[A-Z]" | tr -d '-')

    if [ "${modelnhuc}" = '' ];then
      echo ERROR :$inputmodel , $1   ,  ${modelnhuc}
      #DBG_MSG  "exit 1"
      exit 0
    fi

    fulpath=$URL_INF/${modelnhuc}

    dlresult=IDENTIC
    if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then
      MESSAGE  "wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath"
    fi
  fi
  wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath    > /dev/null 2> /dev/null 

  #--------------------------------------   
  
  if [ ! -f ${wkdir}/${modelnhuc} ];then
     #     DCP315C -> DCP315CN
     dlresult=APPROX1
     modelnhuc2=$(echo $inputmodel | tr "[a-z]" "[A-Z]" | tr -d '-' |\
		sed -e s/"[A-Z][A-Z][A-Z][A-Z]$"/""/g         \
		    -e s/"[A-Z][A-Z][A-Z]$"/""/g              \
		    -e s/"[A-Z][A-Z]$"/""/g                   \
                    -e s/"[A-Z]$"/""/g )

     for suffix in $SUFFIX1
     do
       modelnhuc=${modelnhuc2}${suffix}

       if [ "${modelnhuc}" != '' ];then
         fulpath=$URL_INF/${modelnhuc}
         if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then 
	   MESSAGE "wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath"
	 fi
	 wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath > /dev/null 2> /dev/null 
         if [ $? = '0' ];then 
           break
         fi
       fi  
       modelnhuc='___not_found___'
     done
  fi

  #--------------------------------------   
  if [ ! -f ${wkdir}/${modelnhuc} ];then
    #  DCP315C  -> DCP315
    dlresult=APPROX2
    modelnhuc=$(echo $inputmodel | tr "[a-z]" "[A-Z]" | tr -d '-' |\
		sed -e s/"[A-Z][A-Z][A-Z][A-Z]$"/""/g         \
		    -e s/"[A-Z][A-Z][A-Z]$"/""/g              \
		    -e s/"[A-Z][A-Z]$"/""/g                   \
                    -e s/"[A-Z]$"/""/g )

		    
    if [ "${modelnhuc}" != '' ];then
      fulpath=$URL_INF/${modelnhuc}
      if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then
	MESSAGE "wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath"
      fi
      wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath     > /dev/null 2> /dev/null 
    fi
  fi

  #--------------------------------------   
  if [ ! -f "${wkdir}/${modelnhuc}" ];then
    #    DCP315C   -> DCP310C   
    dlresult=APPROX3
    modelnhuc=$(echo $inputmodel | \
		sed -e s/"[0-9]$"/"0"/g  \
		    -e s/"[0-9]C"/"0C"/g \
		    -e s/"[0-9]D"/"0D"/g \
		    -e s/"[0-9]W"/"0W"/g \
		    -e s/"[0-9]N"/"0N"/g )
    if [ "${modelnhuc}" != '' ];then
      fulpath=$URL_INF/${modelnhuc}
      #echo wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath
      if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then 
        MESSAGE "wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath"
      fi
      wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath     > /dev/null 2> /dev/null 
    fi
  fi
  #--------------------------------------   

  if [ ! -f ${wkdir}/${modelnhuc} ];then
    #    DCP315C   -> DCP310CN
    dlresult=APPROX4
    modelnhuc2=$(echo $inputmodel | tr "[a-z]" "[A-Z]" | tr -d '-' |\
		sed -e s/"[A-Z][A-Z][A-Z][A-Z]$"/""/g         \
		    -e s/"[A-Z][A-Z][A-Z]$"/""/g              \
		    -e s/"[A-Z][A-Z]$"/""/g                   \
                    -e s/"[A-Z]$"/""/g                       |\
                sed s/"[0-9]$"/"0"/g )

    for suffix in $SUFFIX1
    do
       modelnhuc=${modelnhuc2}${suffix}
       if [ "${modelnhuc}" != '' ];then
         fulpath=$URL_INF/${modelnhuc}
         if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then 
	   MESSAGE "wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath"
	 fi
	 wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath > /dev/null 2> /dev/null 
         if [ $? = '0' ];then 
           break
         fi
       fi  
       modelnhuc='___not_found___'
    done 
  fi

  #--------------------------------------   

  if [ ! -f ${wkdir}/${modelnhuc} ];then
    #    DCP315C   -> DCP310
    dlresult=APPROX5
    modelnhuc=$(echo $inputmodel | tr "[a-z]" "[A-Z]" | tr -d '-' |\
		sed -e s/"[A-Z][A-Z][A-Z][A-Z]$"/""/g         \
		    -e s/"[A-Z][A-Z][A-Z]$"/""/g              \
		    -e s/"[A-Z][A-Z]$"/""/g                   \
                    -e s/"[A-Z]$"/""/g                       |\
                sed s/"[0-9]$"/"0"/g )

    if [ "${modelnhuc}" != '' ];then
      fulpath=$URL_INF/${modelnhuc}
      if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then 
	MESSAGE "wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath"
      fi
      wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath > /dev/null 2> /dev/null 
    fi
    if [ ! -f ${wkdir}/${modelnhuc} ];then
       modelnhuc='___not_found___'

    fi
  fi

  #--------------------------------------   




  if [ -f ${wkdir}/${modelnhuc} ];then

    lnk=$(grep "LNK=" ${wkdir}/${modelnhuc} 2>/dev/null | sed s/'LNK='//g)
    if [ "$lnk" != '' ];then
      PRODUCT_NAME=$(grep "^\[" ${wkdir}/${modelnhuc} 2>/dev/null | sed -e s/"\["//g -e s/"\]"//g) 

      PREPROC=$(grep "PREPROC=" ${wkdir}/${modelnhuc} 2>/dev/null | \
                    sed s/"PREPROC="//g | \
                    sed -e s/^\"//g -e s/\"$//g )
      POSTPROC=$(grep "POSTPROC=" ${wkdir}/${modelnhuc} 2>/dev/null | \
                    sed s/"POSTPROC="//g | \
                    sed -e s/^\"//g -e s/\"$//g )
      lnk_flag="LINK"
      LNK_PRINTERNAME=$(grep "PRINTERNAME" ${wkdir}/${modelnhuc} \
	  2>/dev/null | sed s/"PRINTERNAME="//g )
      if [ -f ${wkdir}/${modelnhuc} ];then
         rm -f  ${wkdir}/${modelnhuc}   2> /dev/null
      fi

      modelnhuc=${lnk}
      fulpath=$URL_INF/${modelnhuc}
      if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then 
        MESSAGE "wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath"
      fi
      wget $WGET_OP $CACHEFLG -P ${wkdir} $fulpath  > /dev/null 2> /dev/null 
    fi
  fi

  if [ "$modelnhuc" = '___not_found___' ];then
     modelnhuc=''
  fi

}



get_packages_name(){
  DBG_MSG get_packages_name
  inf=${wkdir}/$1
  if [ "$PRODUCT_NAME" = '' ];then
    PRODUCT_NAME=$(grep "\[" $inf 2>/dev/null | sed -e s/"\["//g -e s/"\]"//g) 
  fi
  SCANNER_DRV=$(grep "SCANNER_DRV" $inf 2>/dev/null | sed s/"SCANNER_DRV="//g )
  SCANKEY_DRV=$(grep "SCANKEY_DRV" $inf 2>/dev/null | sed s/"SCANKEY_DRV="//g )
  PRINTERNAME=$(grep "PRINTERNAME" $inf 2>/dev/null | sed s/"PRINTERNAME="//g )
  if [ "$SCANNER_DRV" != '' ];then
     SCANNER_LNK="$SCANNER_DRV".lnk
     fulpath=$URL_INF/$SCANNER_LNK
     

     if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then
	echo wget  $WGET_OP $CACHEFLG -P ${wkdir} $fulpath 
     fi
     wget  $WGET_OP $CACHEFLG -P ${wkdir} $fulpath 2> /dev/null
  fi
  if [ "$SCANKEY_DRV" != '' ];then
     SCANKEY_LNK="$SCANKEY_DRV".lnk
     fulpath=$URL_INF/$SCANKEY_LNK
     if [ $infcheck = 0 ] && [ $HIDE_INF = NO ];then
     	echo wget  $WGET_OP $CACHEFLG -P ${wkdir} $fulpath 
     fi
     wget  $WGET_OP $CACHEFLG -P ${wkdir} $fulpath  2> /dev/null
  fi

  if [ "$PKG" = rpm ];then
    CUPSFILE=$(grep "PRN_CUP_RPM" $inf 2>/dev/null | sed s/"PRN_CUP_RPM="//g )
    LPRFILE=$(grep "PRN_LPD_RPM" $inf  2>/dev/null | sed s/"PRN_LPD_RPM="//g )
    PDRVFILE=$(grep "PRN_DRV_RPM" $inf  2>/dev/null | sed s/"PRN_DRV_RPM="//g )
    REQ32LIB=$(grep "REQUIRE32LIB" $inf  2>/dev/null| sed s/"REQUIRE32LIB="//g )
    if [ "$SCANNER_LNK" != '' ];then
      if [ "$arch" = 'i386' ];then
        SCANFILE=$(grep "RPM32=" ${wkdir}/"$SCANNER_LNK" | sed s/"RPM32="//g )
      else
        SCANFILE=$(grep "RPM64=" ${wkdir}/"$SCANNER_LNK" | sed s/"RPM64="//g )
      fi
    fi
    if [ "$SCANKEY_LNK" != '' ];then
      if [ "$arch" = 'i386' ];then
        SKEYFILE=$(grep "RPM32=" ${wkdir}/"$SCANKEY_LNK" | sed s/"RPM32="//g )
      else
        SKEYFILE=$(grep "RPM64=" ${wkdir}/"$SCANKEY_LNK" | sed s/"RPM64="//g )
      fi
    fi


  else
    CUPSFILE=$(grep "PRN_CUP_DEB" $inf 2>/dev/null | sed s/"PRN_CUP_DEB="//g )
    LPRFILE=$(grep "PRN_LPD_DEB" $inf  2>/dev/null | sed s/"PRN_LPD_DEB="//g )
    PDRVFILE=$(grep "PRN_DRV_DEB" $inf  2>/dev/null | sed s/"PRN_DRV_DEB="//g )
    REQ32LIB=$(grep "REQUIRE32LIB" $inf  2>/dev/null| sed s/"REQUIRE32LIB="//g )
    if [ "$SCANNER_LNK" != '' ];then
      if [ "$arch" = 'i386' ];then
        SCANFILE=$(grep "DEB32=" ${wkdir}/"$SCANNER_LNK" | sed s/"DEB32="//g )
      else
        SCANFILE=$(grep "DEB64=" ${wkdir}/"$SCANNER_LNK" | sed s/"DEB64="//g )
      fi
    fi
    if [ "$SCANKEY_LNK" != '' ];then
      if [ "$arch" = 'i386' ];then
        SKEYFILE=$(grep "DEB32=" ${wkdir}/"$SCANKEY_LNK" | sed s/"DEB32="//g )
      else
        SKEYFILE=$(grep "DEB64=" ${wkdir}/"$SCANKEY_LNK" | sed s/"DEB64="//g )
      fi
    fi

  fi

  if [ "$PREPROC" = '' ];then
    PREPROC=$(grep "PREPROC=" $inf 2>/dev/null | \
                    sed s/"PREPROC="//g | \
                    sed -e s/^\"//g -e s/\"$//g )
  fi
  if [ "$POSTPROC" = '' ];then
    POSTPROC=$(grep "POSTPROC=" $inf 2>/dev/null | \
                    sed s/"POSTPROC="//g | \
                    sed -e s/^\"//g -e s/\"$//g )

  fi

  if [ -f "$inf" ];then
    rm -f "$inf"   2> /dev/null
  fi
  if [ -f ${wkdir}/"$SCANNER_LNK" ] && [ "$SCANNER_LNK" != '' ];then
    rm -f ${wkdir}/"$SCANNER_LNK"   2> /dev/null
  fi
  if [ -f ${wkdir}/"$SCANKEY_LNK" ] && [ "$SCANKEY_LNK" != '' ];then
    rm -f ${wkdir}/"$SCANKEY_LNK"   2> /dev/null
  fi
}

HOSTDEFAULT="www.brother.com"
HOSTINFJP=$HOSTDEFAULT
HOSTINFUS=$HOSTDEFAULT
HOSTPKGJP=$HOSTDEFAULT
HOSTPKGUS=$HOSTDEFAULT

DBG_MSG  BROTHERSOLUTIONSCENTOR_HOSTINFJP=$BROTHERSOLUTIONSCENTOR_HOSTINFJP
DBG_MSG  BROTHERSOLUTIONSCENTOR_HOSTINFUS=$BROTHERSOLUTIONSCENTOR_HOSTINFUS
DBG_MSG  BROTHERSOLUTIONSCENTOR_HOSTPKGJP=$BROTHERSOLUTIONSCENTOR_HOSTPKGJP
DBG_MSG  BROTHERSOLUTIONSCENTOR_HOSTPKGUS=$BROTHERSOLUTIONSCENTOR_HOSTPKGUS

if [ "$BROTHERSOLUTIONSCENTOR_HOSTINFJP" != '' ];then
   HOSTINFJP=$BROTHERSOLUTIONSCENTOR_HOSTINFJP
fi

if [ "$BROTHERSOLUTIONSCENTOR_HOSTINFUS" != '' ];then
   HOSTINFUS=$BROTHERSOLUTIONSCENTOR_HOSTINFUS
fi

if [ "$BROTHERSOLUTIONSCENTOR_HOSTPKGJP" != '' ];then
   HOSTPKGJP=$BROTHERSOLUTIONSCENTOR_HOSTPKGJP
fi

if [ "$BROTHERSOLUTIONSCENTOR_HOSTPKGUS" != '' ];then
   HOSTPKGUS=$BROTHERSOLUTIONSCENTOR_HOSTPKGUS
fi


BASEPATHJP="/pub/bsc/linuxj/"
BASEPATHUS="/pub/bsc/linux/"




set_host_info(){
  DBG_MSG set_host_info
  if [ "$1" = "JPN" ];then
      URL_INF="http://"${HOSTINFJP}${BASEPATHJP}infs
      URL_PKG="http://"${HOSTPKGJP}${BASEPATHJP}packages
  else
      URL_INF="http://"${HOSTINFUS}${BASEPATHUS}infs
      URL_PKG="http://"${HOSTPKGUS}${BASEPATHUS}packages
  fi
  DBG_MSG "  URL_INF="$URL_INF
  DBG_MSG "  URL_PKG="$URL_PKG
}


network_check(){
  netchkpage=$1
  if [ "${wkdir}" != '' ] && [ "$netchkpage" != '' ];then
    if [ -f ${wkdir}/$netchkpage ];then
      rm  ${wkdir}/$netchkpage   2> /dev/null
    fi
  fi

  fulpath2="http://"${HOSTINFUS}${BASEPATHUS}infs/$netchkpage
  wget $WGET_OP2 $CACHEFLG -P ${wkdir} $fulpath2    > /dev/null 2> /dev/null 
  rcwget=$?

  netaccess=FALSE
  if [ -f ${wkdir}/$netchkpage ];then
     netaccess=SUCCESS
     rm  ${wkdir}/$netchkpage   2> /dev/null
  fi
}

drv_get_and_install(){
  DBG_MSG drv_get_and_install
  package=$1
  license=$2
  default=$3
  iinstall_result=No

  if [ "$package" != '' ];then
    echo -e $COLOR4$MESSAGE150$MONO #"You are going to install ...."
    echo -e $COLOR4"   "$package$MONO
    if [ "$default" = No ];then
      echo -e -n $COLOR$MESSAGE160        #"OK\? [y/N]  ->"
      answer=""
      read answer
      echo -e $MONO
      if [ "$answer" = Y ] || [ "$answer" = y ]; then
	if ! [ -f "$package" ];then
	    $license
	    echo -e -n $COLOR$MESSAGE170        #"Are you agree\? [Y/n] ->"
	    answer=""
	    read answer
	    echo -e $MONO
	    if [ "$answer" != N ] && [ "$answer" != n ]; then
		echo wget $WGET_OP $CACHEFLG $URL_PKG/$package
		wget $WGET_OP $CACHEFLG $URL_PKG/$package
	    fi
	    if [ -f "$package" ];then
               echo -n -e $COLOR4
	       echo $PKGCMD  $package
               echo -n -e $MONO
               if [ "$DEBUG_NOINSTALL" != 'yes' ];then
                 pre_proc
	         $PKGCMD  $package
               else
                 sleep 1
               fi
	       iinstall_result=Yes
	    fi

	fi
      fi                            #answer
    elif [ "$default" = Yes ];then
      echo -e -n $COLOR$MESSAGE165        #"OK\? [Y/n]  ->"
      answer=""
      read answer
      echo -e $MONO
      if [ "$answer" != N ] && [ "$answer" != n ]; then
	 if ! [ -f "$package" ];then
	    $license
	    echo -e -n $COLOR$MESSAGE170        #"Are you agree\? [Y/n] ->"
	    answer=""
	    read answer
	    echo -e $MONO
	    if [ "$answer" != N ] && [ "$answer" != n ]; then
		echo wget $WGET_OP $CACHEFLG $URL_PKG/$package
		wget $WGET_OP $CACHEFLG $URL_PKG/$package
	    fi

	    if [ -f "$package" ];then
              echo -n -e $COLOR4
	      echo $PKGCMD  $package
              echo -n -e $MONO
              if [ "$DEBUG_NOINSTALL" != 'yes' ];then
                pre_proc
	        $PKGCMD  $package
              else
                sleep 1
              fi
	      iinstall_result=Yes
	    fi
	 fi
      fi                              #answer
    else             # deault = Force
      if ! [ -f "$package" ];then
	 $license
	 echo -e -n $COLOR$MESSAGE170        #"Are you agree\? [Y/n] ->"
	 answer=""
	 read answer
	 echo -e $MONO
	 if [ "$answer" != N ] && [ "$answer" != n ]; then
	    echo wget $WGET_OP $CACHEFLG $URL_PKG/$package
	    wget $WGET_OP $CACHEFLG $URL_PKG/$package
	 fi
       fi
       if [ -f "$package" ];then
         echo -n -e $COLOR4
         echo $PKGCMD  $package
         echo -n -e $MONO
         if [ "$DEBUG_NOINSTALL" != 'yes' ];then
           pre_proc
	   $PKGCMD  $package
           iinstall_result=Yes
         else
           sleep 1
         fi
       fi
    fi                                #default
  fi                                  #package
}


make_generic_uninstaller(){
    DBG_MSG make_generic_uninstaller
    if [ -f $1 ];then
	generic_uninstaller=uninstaller_$2
	cat <<GENERICUNINST   > $generic_uninstaller
#! /bin/bash
$RMPKGCMD       $2

$(rmscanlibmodules $3)

GENERICUNINST
    chmod 744 $generic_uninstaller
    fi
}

make_brscan_uninstaller(){
    DBG_MSG make_brscan_uninstaller
    if [ -f $1 ];then
	brscan_uninstaller=uninstaller_$2
	cat <<BRSCANUNINST   > $brscan_uninstaller
#! /bin/bash

touch /usr/local/Brother/sane/dummy
$RMPKGCMD       $2
rm -f /usr/local/Brother/sane/dummy
rmdir --ignore-fail-on-non-empty /usr/local/Brother/sane 2>/dev/null

$(rmscanlibmodules $3)
BRSCANUNINST
        chmod 744 $brscan_uninstaller
    fi
}

make_brscan2_uninstaller(){
    DBG_MSG make_brscan2_uninstaller
    if [ -f $1 ];then
	brscan2_uninstaller=uninstaller_$2
	cat <<BRSCAN2UNINST   > $brscan2_uninstaller
#! /bin/bash

touch /usr/local/Brother/sane/dummy
$RMPKGCMD       $2
rm -f /usr/local/Brother/sane/dummy
rmdir --ignore-fail-on-non-empty /usr/local/Brother/sane 2>/dev/null

$(rmscanlibmodules $3)
BRSCAN2UNINST
        chmod 744 $brscan2_uninstaller
    fi
}



scanlibmodules1="\
libbrcolm.so.1.0.1 \
libbrscandec.so.1.0.0 \
sane/libsane-brother.so.1.0.7 \
sane/libsane-brother.so \
sane/libsane-brother.so.1 \
libbrscandec.so.1 \
libbrcolm.so \
libbrcolm.so.1 \
libbrscandec.so"

scanlibmodules2="\
libbrscandec2.so.1.0.0 \
sane/libsane-brother2.so.1.0.7 \
sane/libsane-brother2.so.1 \
sane/libsane-brother2.so \
libbrcolm2.so.1.0.1 \
libbrcolm2.so \
libbrscandec2.so.1 \
libbrscandec2.so \
libbrcolm2.so.1"

scanlibmodules3="\
libbrscandec3.so.1.0.0 \
sane/libsane-brother3.so.1.0.7 \
sane/libsane-brother3.so.1 \
sane/libsane-brother3.so \
libbrscandec3.so \
libbrscandec3.so.1"


scanlibmodules4=""


dellist=''
cpscanlibmodules(){
  for file in $1
  do
    lib64mod=/usr/lib64/$file
    libmod=/usr/lib/$file

    if [ -f $lib64mod ];then
      if [ -d /usr/lib ];then
        if [ ! -f $libmod ];then
           cp $lib64mod  $libmod 2> /dev/null
           if [ -f $libmod ];then
             dellist2=$(echo $dellist $libmod)
             dellist=$dellist2
           fi
        fi
      fi
    fi
  done
}


rmscanlibmodules(){
  for file in $dellist
  do
    for check in $*
    do
      chkresult=$(echo $file | grep $check\$ )
      if [ "$chkresult" !=  '' ];then
        echo rm  -f $file 
      fi
    done
    
  done
}

udevrulefile=""
udev_installed=no
udev_install(){
libsanerule=$(ls /lib/udev/rules.d/*.rules /etc/udev/rules.d/*.rules | \
    grep libsane | head --line=1)
number=$(echo $libsanerule | \
    sed s/"\/lib\/udev\/rules.d\/"//g |\
    sed s/"\/etc\/udev\/rules.d\/"//g |\
    head --bytes=2)
chk=$(echo $number | grep "[0-9][0-9]")
if [ "$chk" = '' ];then
    libsanerule=$(ls /lib/udev/rules.d/*.rules /etc/udev/rules.d/*.rules | \
	grep sane-backends | head --line=1)
    number=$(echo $libsanerule | \
	sed s/"\/lib\/udev\/rules.d\/"//g |\
        sed s/"\/etc\/udev\/rules.d\/"//g |\
        head --bytes=2)
fi
chk=$(echo $number | grep "[0-9][0-9]")
if [ "$chk" != '' ];then
  chk=$(grep "ENV{libsane_matched}=\"yes\""  $libsanerule | tail -1)
  if [ "$chk" != '' ];then

####
    udevrulefile="/etc/udev/rules.d/${number}-brother-libsane-type1-inst.rules"
    cat <<  %%_UDEV_RULE_%% > $udevrulefile
#
#   udev rules sample for Brother MFP
#         version 1.0.2-0
#
#   Copyright (C) 2012-2017 Brother. Industries, Ltd.
#
#   copy to /etc/udev/rules.d or /lib/udev/rules.d
#

ACTION!="add", GOTO="brother_mfp_end"
SUBSYSTEM=="usb", GOTO="brother_mfp_udev_1"
SUBSYSTEM!="usb_device", GOTO="brother_mfp_end"
LABEL="brother_mfp_udev_1"
SYSFS{idVendor}=="04f9", GOTO="brother_mfp_udev_2"
ATTRS{idVendor}=="04f9", GOTO="brother_mfp_udev_2"
GOTO="brother_mfp_end"
LABEL="brother_mfp_udev_2"
ATTRS{bInterfaceClass}!="0ff", GOTO="brother_mfp_end"
ATTRS{bInterfaceSubClass}!="0ff", GOTO="brother_mfp_end"
ATTRS{bInterfaceProtocol}!="0ff", GOTO="brother_mfp_end"
#MODE="0666"
#GROUP="scanner"
ENV{libsane_matched}="yes"
#SYMLINK+="scanner-%k"
LABEL="brother_mfp_end"
%%_UDEV_RULE_%%
####
   chmod 644    $udevrulefile
   udev_installed=yes
  fi
fi
}



scanner_install(){
  DBG_MSG scanner_install

  case "$SCANNER_DRV"  in
    "brscan")
      drv_get_and_install $SCANFILE  Force
      if [ $iinstall_result = Yes ];then
        cpscanlibmodules "$scanlibmodules1"
        make_brscan_uninstaller  $SCANFILE  "$SCANNER_DRV" "$scanlibmodules1"
        install_done=yes
      fi
      scanconfig=brsaneconfig
      drv_get_and_install $SKEYFILE  Force
      if [ $iinstall_result = Yes ];then
          dellist=''
          make_generic_uninstaller $SKEYFILE  brscan-skey
          install_done=yes
      fi
      ;;
    "brscan2")
      drv_get_and_install $SCANFILE  Force
      if [ $iinstall_result = Yes ];then
        cpscanlibmodules "$scanlibmodules2"
        make_brscan2_uninstaller $SCANFILE  "$SCANNER_DRV" "$scanlibmodules2"
        install_done=yes
      fi
      scanconfig=brsaneconfig2
      drv_get_and_install $SKEYFILE  Force
      if [ $iinstall_result = Yes ];then
          dellist=''
          make_generic_uninstaller $SKEYFILE  brscan-skey
          install_done=yes
      fi
      ;;
    "brscan3")
      drv_get_and_install $SCANFILE  Force
      if [ $iinstall_result = Yes ];then
        cpscanlibmodules "$scanlibmodules3"
        make_generic_uninstaller $SCANFILE  "$SCANNER_DRV" "$scanlibmodules3"
        install_done=yes
      fi
      scanconfig=brsaneconfig3
      drv_get_and_install $SKEYFILE  Force
      if [ $iinstall_result = Yes ];then
          dellist=''
          make_generic_uninstaller $SKEYFILE  brscan-skey
          install_done=yes
      fi
      ;;
    "brscan4")
      drv_get_and_install $SCANFILE  Force
      if [ $iinstall_result = Yes ];then
        cpscanlibmodules "$scanlibmodules4"
        make_generic_uninstaller $SCANFILE  "$SCANNER_DRV" "$scanlibmodules4"
        install_done=yes
      fi
      scanconfig=brsaneconfig4
      drv_get_and_install $SKEYFILE  Force
      if [ $iinstall_result = Yes ];then
          dellist=''
          make_generic_uninstaller $SKEYFILE  brscan-skey
          install_done=yes
      fi
      ;;
    "brscan5")
      drv_get_and_install $SCANFILE  Force
      if [ $iinstall_result = Yes ];then
        cpscanlibmodules "$scanlibmodules5"
        make_generic_uninstaller $SCANFILE  "$SCANNER_DRV" "$scanlibmodules5"
        install_done=yes
      fi
      scanconfig=brsaneconfig5
      drv_get_and_install $SKEYFILE  Force
      if [ $iinstall_result = Yes ];then
          dellist=''
          make_generic_uninstaller $SKEYFILE  brscan-skey
          install_done=yes
      fi
      ;;

    * )
      ;;
  esac

  udev_install

  if [ $udev_installed = yes ];then
      echo   rm $udevrulefile  >> uninstaller_${SCANNER_DRV}
  fi

  # install libusb-0.1-4 if not available

  libusbchk=$(ls -R /lib /usr/lib /usr/sbin | grep 'libusb-0.1.so.4')

  if [ "$libusbchk" = '' ];then
      if [ "$(which apt-get 2>/dev/null)" != '' ];then
	  echo apt-get install libusb-0.1-4
	  apt-get install libusb-0.1-4
      fi
  fi

  # libusb-0.1-4

  post_proc

  if [ "$scanconfig" != '' ] && \
     [ "$PRODUCT_NAME" != '' ] && \
     [ -f "$(which $scanconfig)" ];then
    if [ "$(echo $deviceuri | grep 'usb://')" = '' ];then
      if [ "$(echo $deviceuri | grep 'file://')" = '' ];then
       if [ "$ipadrs" = '' ];then
         echo -e -n $COLOR$MESSAGE220          #"  enter IP address ->"
         read ipadrs
         echo -e $MONO
       fi
      fi
      echo -n -e $COLOR4
      echo $scanconfig -a name=$PRODUCT_NAME model=$PRODUCT_NAME ip=$ipadrs
      echo -n -e $MONO
      $scanconfig -a name=$PRODUCT_NAME model=$PRODUCT_NAME ip=$ipadrs
    fi
  fi

}

pre_proc(){
  if [ "$preproc_done" = '' ];then
    if [ "$PREPROC" != '' ];then
       echo "$PREPROC"   | /bin/bash
    fi
  fi
  preproc_done=done
}

post_proc(){
  if [ "$install_done" = yes ];then
    if [ "$postproc_done" = '' ];then
      if [ "$POSTPROC" != '' ];then
         echo "$POSTPROC"   | /bin/bash
      fi
    fi
    postproc_done=done
  fi
}

cleanup_deb_cups_pkg(){
 if [ "$PKG" = deb ];then
  if [ "$(which awk 2> /dev/null)" != '' ];then
    installedpkgs=$($LSPKGCMD | grep -i cups | grep -i brother | \
                                awk '{print $2}')
    for pkg in $installedpkgs
    do
      pkg2=$(echo $pkg | sed s/":.*$"//g)
      if [ "$(echo $CUPSFILE | grep $pkg2 )" != '' ];then
        $RMPKGCMD $pkg
        break             
      fi
    done
  fi
 fi
}


ipadrs=''
deviceuri="usb://"
PRODUCT_NAME=''

#
#  START  (MAIN)
#

HIDE_INF=YES

if [ "$(echo $0 | grep  linux-brjprinter-installer)" = '' ];then
  REGION=US
else
  REGION=JPN
fi


DBG_MSG MAIN
dlresult=IDENTIC
lnk_flag='    '

if [ "$1" = '-h' ] || [ "$1" = '--help' ];then
   echo -e $COLOR"$MESSAGE010"$0"$MESSAGE020"$MONO    #"USAGE:  $0  model"
   echo -e $COLOR"$MESSAGE012"$0"$MESSAGE030"$MONO    #"USAGE:  $0  -f model"
   echo -e $COLOR"$MESSAGE012"$0"$MESSAGE040"$MONO    #"USAGE:  $0  -l "
   #DBG_MSG  "exit 2"
   exit 0
fi

if [ $(whoami) != 'root' ];then
    echo -e  $COLOR$MESSAGE050$MONO       #"Only root can do this operation."
    #DBG_MSG  "exit 5"
    exit 0
fi

if [ ! -f /etc/init.d/cups ] && [ ! -f /etc/init.d/cupsys ];then 
 if [ "$(which lpadmin 2> /dev/null)" = '' ];then
  echo -e $COLOR$MESSAGE060$MONO                  #"CUPS is not installed."
  if [ "$1" = '' ];then
    echo -e -n $COLOR$MESSAGE240$MONO    #"Hit Return/Enter Key"
    read answer
  fi
  #DBG_MSG  "exit 6"
  exit 0
 fi
fi

LIB64FLT=/usr/lib64/cups/filter
LIB32FLT=/usr/lib32/cups/filter
LIBFLT=/usr/lib/cups/filter


TESTPRINT=/usr/share/cups/data/testprint.ps
TESTPRINT2=/usr/share/cups/data/testprint


## sweep
pre_install_sweep



package_list=NO
CACHEFLG='--no-cache'


infcheck=0
if  [ "$1" = '--inf-check=1' ];then
   infcheck=1
   package_list=TEXT
fi
if  [ "$1" = '--inf-check=2' ];then
   infcheck=2
   package_list=CSV
fi
if  [ "$1" = '--inf-check=3' ];then
   infcheck=3
   package_list=CSV
fi
if  [ "$1" = '--inf-check=4' ];then
   infcheck=4
   package_list=CSV
fi
if  [ "$1" = '--inf-check=5' ];then
   infcheck=5
   package_list=CSV
fi



if [ package_list = TEXT ];then
  echo -e -n $MONO
fi


if [ "$(which wget 2> /dev/null)" = '' ];then
  if   [ "$(which yum 2>/dev/null)" != '' ];then
     echo yum install wget
     yum install wget
  elif [ "$(which dnf 2>/dev/null)" != '' ];then
     echo dnf install wget
     dnf install wget
  elif [ "$(which apt-get 2>/dev/null)" != '' ];then
     echo apt-get install wget
     apt-get install wget
  fi
fi


if [ "$(which wget 2> /dev/null)" = '' ];then
  echo -e -n $COLOR$MESSAGE280             #"wget is required."
  echo -e $MONO
  #DBG_MSG  "exit 7"
  exit 0
fi

post_install_sweep 





if [ "$(which dpkg 2> /dev/null)" != '' ];then
   PKG=deb
elif [ "$(which rpm 2> /dev/null)" != '' ];then
   PKG=rpm
else
   echo -e $COLOR$MESSAGE122$MONO     #"Rpm or dpkg is required."
   post_install_sweep 
   if [ "$1" = '' ];then
     echo -e -n $COLOR$MESSAGE240$MONO    #"Hit Return/Enter Key"
     read answer
   fi
   #DBG_MSG  "exit 9"
   exit 0
fi


if [ "$PKG" = deb ];then
 if [ "$(which awk 2> /dev/null)" = '' ];then
  if [ "$(which apt-get 2>/dev/null)" != '' ];then
     echo apt-get install mawk
     apt-get install mawk
  fi
 fi
fi



if [ "$BROTHER_INSRALLER_FAKE_PKG" != '' ];then
   PKG=$BROTHER_INSRALLER_FAKE_PKG
fi

if [ "$PKG" = deb ];then
  PKGCMD='dpkg  -i --force-all'
  RMPKGCMD='dpkg  -P'
  LSPKGCMD='dpkg  --list'
  EXT='\.deb'
  PKG=deb
elif [ "$PKG" = rpm ];then
  PKGCMD='rpm  -ihv  --nodeps  --replacefiles --replacepkgs'
  RMPKGCMD='rpm -e'
  LSPKGCMD='rpm -qa'
  EXT='\.rpm'
  PKG=rpm
fi

if [ "$1" = '-f' ]             || \
   [ "$1" = '--find' ]         || \
   [ "$1" = '--inf-check=1' ] || \
   [ "$1" = '--inf-check=2' ] || \
   [ "$1" = '--inf-check=3' ] || \
   [ "$1" = '--inf-check=4' ] || \
   [ "$1" = '--inf-check=5' ] || \
   [ "$1" = '--inf-check=6' ] || \
   [ "$1" = '-p' ];then
 MODEL_tmp=$(echo $2 | sed s/'-'//g)
elif [ "$1" = '' ];then
 echo -e -n $COLOR$MESSAGE121       #"Input model name->"
 read modelinput
 echo -e $MONO
 MODEL_tmp=$(echo $modelinput | sed s/'-'//g)
else
 MODEL_tmp=$(echo $1 | sed s/'-'//g)
fi

if [ "$(echo $MODEL_tmp | grep '@')" = '' ];then
  MODEL=$MODEL_tmp
  DEBUG_NOINSTALL='no'
else
  MODEL=$(echo $MODEL_tmp | tr -d '@')
  DEBUG_NOINSTALL='yes'
fi

if [ "$(echo $MODEL_tmp | grep '\[')" = '' ];then
  MODEL=$MODEL_tmp
  NODOWNLOAD=0
else
  INFPATH="$(echo $MODEL_tmp | tr -d '[' | tr -d ']' )"
  if [ ! -f $INFPATH ];then
    echo -e $COLOR$MESSAGE130$MONO
    exit 0
  fi
  MODEL=$(echo $MODEL_tmp | tr -d '[' | tr -d ']' | sed -e s/"^.*\/"//g)

  NODOWNLOAD=1
fi



LPRFILE=""
CUPSFILE=""
PDRVFILE=""
SCANFILE=""
SKEYFILE=""


wkdir=/tmp/brprinter-installer
packdir=brother_driver_packdir
basedir=$(pwd)

modelnhuc=""
mkdir -p $wkdir 

REGION2=$REGION


if [ -s "$(echo $1 | grep -e .${PKG})"   ]      && \
   [ -s "$(echo $2 | grep -e .${PKG})"   ]      && \
   [ -s "$(echo $1 | grep -e 'lp' -e 'cups')"   ] && \
   [ -s "$(echo $2 | grep -e 'lp' -e 'cups')"   ] && \
   [ -f $1 ] && \
   [ -f $2 ] ; then

   #install local files

   tmpcup=$(echo $1 | grep cups)
   tmplpr=$(echo $2 | grep lp)
   if [ "$tmpcup" = '' ] || [ "$tmplpr" = '' ];then
      tmpcup=$(echo $2 | grep cups)
      tmplpr=$(echo $1 | grep lp)
   fi

   if [ "$tmpcup" = '' ] || [ "$tmplpr" =  '' ];then
      echo -e $COLOR$MESSAGE130$MONO     #"Install packages does not be found."
      exit 0
   fi

   echo [UNKNOWN]            >  $wkdir/LOCAL
   echo PRN_CUP_RPM=$tmpcup  >> $wkdir/LOCAL
   echo PRN_CUP_DEB=$tmpcup  >> $wkdir/LOCAL
   echo PRN_LPD_RPM=$tmplpr  >> $wkdir/LOCAL
   echo PRN_LPD_DEB=$tmplpr  >> $wkdir/LOCAL
   echo PRN_DRV_RPM=$tmplpr  >> $wkdir/LOCAL
   echo PRN_DRV_DEB=$tmplpr  >> $wkdir/LOCAL
   echo PRINTERNAME=UNKNOWN  >> $wkdir/LOCAL
   echo SCANNER_DRV=         >> $wkdir/LOCAL
   echo SCANKEY_DRV=         >> $wkdir/LOCAL

   MODEL=LOCAL
   NODOWNLOAD=2

fi

# network check

netaccess=FALSE
network_check  HL5470DW
if [ $netaccess != SUCCESS ];then
   network_check  MFCJ6710CDW
fi

if [ $netaccess != SUCCESS ];then

    echo -e -n $COLOR$MESSAGE070  #"Will you specify the PROXY server\? [y/N] ->"
    read answer
    if [ "$answer" = Y ] || [ "$answer" = y ]; then

      #"enter PROXY server URL "
      #"   ex http://\(proxy-server-url\):\(port\)"
      #"   ex http://\(login-name\):\(pass-word\)@\(proxy-server-url\):\(port\)"
      #"     ->"

      echo -e $COLOR$MESSAGE080
      echo -e $COLOR$MESSAGE090
      echo -e $COLOR$MESSAGE100
      echo -e -n $COLOR$MESSAGE110
      read proxy
      echo -e $MONO
      export http_proxy=$proxy
      network_check  HL5470DW
      if [ $netaccess != SUCCESS ];then
         network_check  MFCJ6710CDW
      fi
      if [ $netaccess != SUCCESS ];then
        echo -e $COLOR$MESSAGE120$MONO    
        exit 0
      fi
    else
      echo -e $COLOR$MESSAGE120$MONO    
      exit 0
    fi
fi




set_host_info $REGION
get_inf_file  $MODEL  $wkdir

if [ $REGION = JPN ];then
  if [ ! -f ${wkdir}/${modelnhuc} ] || [ "${modelnhuc}" = '' ];then
    REGION=US
    modelnhuc=''
    set_host_info $REGION
    get_inf_file  $MODEL  $wkdir
    REGION=JPN
  fi
fi

if [ $infcheck = 0 ];then
  if [ ! -f ${wkdir}/${modelnhuc} ] || [ "${modelnhuc}" = '' ];then
    netaccess=FALSE
    network_check  HL5470DW
    if [ $netaccess != SUCCESS ];then
       network_check  MFCJ6710CDW
    fi

    if [ $netaccess = SUCCESS ];then
      echo -e $COLOR$MESSAGE130$MONO     #"Install packages does not be found."
      echo -e $COLOR$MESSAGE140$MONO     #" Confirm the model name."
      echo -e $MONO
      exit 0
    fi
    echo -e -n $COLOR$MESSAGE070  #"Will you specify the PROXY server\? [y/N] ->"
    read answer
    if [ "$answer" = Y ] || [ "$answer" = y ]; then

      #"enter PROXY server URL "
      #"   ex http://\(proxy-server-url\):\(port\)"
      #"   ex http://\(login-name\):\(pass-word\)@\(proxy-server-url\):\(port\)"
      #"     ->"

      echo -e $COLOR$MESSAGE080
      echo -e $COLOR$MESSAGE090
      echo -e $COLOR$MESSAGE100
      echo -e -n $COLOR$MESSAGE110
      read proxy
      echo -e $MONO
      export http_proxy=$proxy
    else
      echo -e $MONO
      #DBG_MSG  "exit 10"
      exit 0
    fi
    echo -e $MONO
    REGION=$REGION2

    set_host_info $REGION
    get_inf_file  $MODEL  $wkdir

    if [ $REGION = JPN ];then
      if [ ! -f ${wkdir}/${modelnhuc} ] || [ "${modelnhuc}" = '' ];then
        REGION=US
        modelnhuc=''
        set_host_info $REGION
        get_inf_file  $MODEL  $wkdir
      fi
      REGION=JPN
    fi
  fi
fi

if [ ! -f ${wkdir}/${modelnhuc} ] || [ "${modelnhuc}" = '' ];then
  #"Cannot get server information. Confirm the network."
  if [ $infcheck = 0 ];then
    echo -e $COLOR$MESSAGE120$MONO    
    exit 0
  fi
  if [ $package_list = TEXT ];then
    echo "PACKAGE:PRNL="$LPRFILE
    echo "PACKAGE:PRNC="$CUPSFILE
    echo "PACKAGE:PDRV="$PDRVFILE
    echo "PACKAGE:SCAN="$SCANFILE
    echo "PACKAGE:SKEY="$SKEYFILE
    exit 0
  fi
  if [ $package_list = CSV ];then
    echo "$2"":,"$PKG",${dlresult},${lnk_flag}"\
         ,$LPRFILE,$CUPSFILE,$PDRVFILE,$SCANFILE,$SKEYFILE
    exit 0
  fi

  touch brother-drivers/"$0".log
  dlresult="FALSE  "
  lnk_flag="       "
  rccups="       "
  rclpr="       "
  rcscan="       "
  rcskey="       "

  if [ "$infcheck" = 3 ];then
     echo "$2"":,"$PKG",${dlresult},${lnk_flag}","$SCANNER_DRV"\
         ,$rccups,$rclpr,$rcscan,$rcskey\
 	  >>  brother-drivers/"$0".log
     rm -fR brother-drivers/$2   2> /dev/null
  fi

  if [ "$infcheck" = 4 ] || [ "$infcheck" = 5 ];then

     echo "$2"":,"$PKG",${dlresult},${lnk_flag}","$SCANNER_DRV"\
         ,$rccups,$rclpr,$rcscan,$rcskey\
         ,$LPRFILE,$CUPSFILE,$PDRVFILE,$SCANFILE,$SKEYFILE \
  	  >>  brother-drivers/"$0".log
  fi


  exit 0
fi

arch=$(uname -m | grep "amd64")
if [ "$arch" = '' ];then
  arch=$(uname -m | grep "x86_64")
fi
if [ "$arch" = '' ];then
  arch=i386
fi

if [ "$BROTHER_INSRALLER_FAKE_ARC" != '' ];then
  arch=$BROTHER_INSRALLER_FAKE_ARC
fi

get_packages_name ${modelnhuc}

if [ -f ${wkdir}/${modelnhuc} ];then
   rm -f ${wkdir}/${modelnhuc}   2> /dev/null
fi

if [ $infcheck = 1 ];then
  echo "PACKAGE:PRNL="$LPRFILE
  echo "PACKAGE:PRNC="$CUPSFILE
  echo "PACKAGE:PDRV="$PDRVFILE
  echo "PACKAGE:SCAN="$SCANFILE
  echo "PACKAGE:SKEY="$SKEYFILE
  exit 0
fi
if [ $infcheck = 2 ];then
  echo "$2"":,"$PKG",${dlresult},${lnk_flag}"\
         ,$LPRFILE,$CUPSFILE,$PDRVFILE,$SCANFILE,$SKEYFILE
  exit 0
fi



if [ "$infcheck" -ge 3 ];then
  rccups='N/A    '
  rclpr='N/A    '
  rcscan='N/A    '
  rcskey='N/A    '

  dwkdir=brother-drivers/$2
  mkdir -p $dwkdir
  if [ "$CUPSFILE" != '' ];then
    rccups="FALSE  "
    wget $WGET_OP '-nc' $URL_PKG/$CUPSFILE   -P $dwkdir
  fi
  if [ "$LPRFILE" != '' ];then
    rclpr="FALSE  "
    wget $WGET_OP '-nc' $URL_PKG/$LPRFILE    -P $dwkdir
  fi
  if [ "$PDRVFILE" != '' ];then
    rcpdrv="FALSE  "
    wget $WGET_OP '-nc' $URL_PKG/$PDRVFILE    -P $dwkdir
  fi
  if [ "$SCANFILE" != '' ];then
    rcscan="FALSE  "
    wget $WGET_OP '-nc' $URL_PKG/$SCANFILE   -P $dwkdir
  fi
  if [ "$SKEYFILE" != '' ];then
    rcskey="FALSE  "
    wget $WGET_OP '-nc' $URL_PKG/$SKEYFILE   -P $dwkdir
  fi
 
  # -------------
  if [ "$CUPSFILE" != '' ];then
    if [ -f $dwkdir/$CUPSFILE ];then
      rccups=SUCCESS
    fi
  fi
  if [ "$LPRFILE" != '' ];then
    if [ -f $dwkdir/$LPRFILE ];then
      rclpr=SUCCESS
    fi
  fi
  if [ "$PDRVFILE" != '' ];then
    if [ -f $dwkdir/$PDRVFILE ];then
      rcpdrv=SUCCESS
    fi
  fi
  if [ "$SCANFILE" != '' ];then
    if [ -f $dwkdir/$SCANFILE ];then
      rcscan=SUCCESS
    fi
  fi
  if [ "$SKEYFILE" != '' ];then
    if [ -f $dwkdir/$SKEYFILE ];then
      rcskey=SUCCESS
    fi
  fi

  # -------------

  touch brother-drivers/"$0".log

  if [ "$infcheck" = 3 ];then
     echo "$2"":,${modelnhuc},"$PKG",${dlresult},${lnk_flag}","$SCANNER_DRV"\
         ,$rccups,$rclpr,$rcscan,$rcskey\
 	  >>  brother-drivers/"$0".log
  fi

  if [ "$infcheck" = 4 ] || [ "$infcheck" = 5 ];then

     echo "$2"":,${modelnhuc},"$PKG",${dlresult},${lnk_flag}","$SCANNER_DRV"\
         ,$rccups,$rclpr,$rcscan,$rcskey\
         ,$LPRFILE,$CUPSFILE,$PDRVFILE,$SCANFILE,$SKEYFILE \
  	  >>  brother-drivers/"$0".log
  fi

  if [ "$infcheck" = 3 ] || [ "$infcheck" = 4 ];then
     rm -fR brother-drivers/$2   2> /dev/null
  fi
  exit 0
fi


if [ "$CUPSFILE" = '' ] && [ "$LPRFILE" = '' ] && [ "$PDRVFILE" = '' ] && [ "$SCAN" = '' ];then
  echo -e $COLOR$MESSAGE130$MONO     #"Install packages does not be found."
  echo -e $COLOR$MESSAGE140$MONO     #" Confirm the model name."

  post_install_sweep 

  if [ "$1" = '' ];then
    echo -e -n $COLOR$MESSAGE240$MONO    #"Hit Return/Enter Key"
    read answer
  fi
  #DBG_MSG  "exit 12"
  exit 0
fi


if [ "$1" = '-f' ] || [ "$1" = '--find' ];then
  echo $LPRFILE
  echo $CUPSFILE
  echo $PDRVFILE
  echo $SCANFILE
  echo $SKEYFILE

  post_install_sweep 
  #DBG_MSG  "exit 13"
  exit 0
fi




PREPKGCMDC=''
PREPKGCMDL=''
PREPKGCMDP=''
if [ "$PKG" = deb ];then
  if [ "$CUPSFILE" != '' ];then
    PREPKGCMDC="dpkg  -x $CUPSFILE /"
  fi
  if [ "$PDRVFILE" != '' ];then
    PREPKGCMDP="dpkg  -x $PDRVFILE /"
  fi
  if [ "$LPRFILE" != '' ];then
    PREPKGCMDL="dpkg  -x $LPRFILE /"
  fi
fi

post_install_sweep 


echo -e $COLOR4$MESSAGE150$MONO      #"You are going to install  following packages."

if [ "$LPRFILE" != '' ];then
  echo -e $COLOR4"   "$LPRFILE$MONO
fi
if [ "$CUPSFILE" != '' ];then
  echo -e $COLOR4"   "$CUPSFILE$MONO
fi
if [ "$PDRVFILE" != '' ];then
  echo -e $COLOR4"   "$PDRVFILE$MONO
fi

if [ "$SCANFILE" != '' ];then
  echo -e $COLOR4"   "$SCANFILE
fi
if [ "$SKEYFILE" != '' ];then
  echo -e $COLOR4"   "$SKEYFILE
fi



echo -e -n $COLOR$MESSAGE160        #"OK\? [y/N]  ->"

read answer
echo -e $MONO

if [ "$answer" != Y ] && [ "$answer" != y ]; then
    #scanner_install          #    scanner
    #DBG_MSG  "exit 14"
    exit 0
fi

if [ "$LPRFILE" != '' ];then
  if ! [ -f "$LPRFILE" ];then
    if [ "$(which wget 2> /dev/null)" = '' ];then
      echo -e -n $COLOR$MESSAGE280             #"wget is required."
      echo -e $MONO
      #DBG_MSG  "exit 16"
      exit 0
    fi
    if [ ! -f $LPRFILE ];then
      rm -f $LPRFILE   2> /dev/null
      echo wget $WGET_OP $CACHEFLG $URL_PKG/$LPRFILE
      wget $WGET_OP $CACHEFLG $URL_PKG/$LPRFILE
    fi
  fi 
fi

if [ "$CUPSFILE" != '' ];then
  if ! [ -f "$CUPSFILE" ];then
    if [ "$(which wget 2> /dev/null)" = '' ];then
      echo -e -n $COLOR$MESSAGE280             #"wget is required."
      echo -e $MONO
      #DBG_MSG  "exit 18"
      exit 0
    fi

    if [ ! -f $CUPSFILE ];then
      rm -f $CUPSFILE   2> /dev/null
      echo wget $WGET_OP $CACHEFLG $URL_PKG/$CUPSFILE
      wget $WGET_OP $CACHEFLG $URL_PKG/$CUPSFILE
    fi

  fi
fi

#--
if [ "$PDRVFILE" != '' ];then
  if ! [ -f "$PDRVFILE" ];then

    pdrv_complex_license

    echo -e -n $COLOR$MESSAGE180          #"Do you agree\? [Y/n] ->"
    read answer
    echo -e $MONO

    if [ "$answer" = N ] || [ "$answer" = n ]; then
      scanner_install          #    scanner
      post_proc
      #DBG_MSG  "exit 17"
      exit 0
    fi
    if [ "$(which wget 2> /dev/null)" = '' ];then
      echo -e -n $COLOR$MESSAGE280             #"wget is required."
      echo -e $MONO
      #DBG_MSG  "exit 18"
      exit 0
    fi

    if [ ! -f $PDRVFILE ];then
      rm -f $PDRVFILE   2> /dev/null
      echo wget $WGET_OP $CACHEFLG $URL_PKG/$PDRVFILE
      wget $WGET_OP $CACHEFLG $URL_PKG/$PDRVFILE
    fi

  fi
fi




pre_proc

require_386lib=no
if [ "$arch" != 'i386' ];then
  require_386lib=yes
  if [ "$REQ32LIB" = 'NO' ] || \
     [ "$REQ32LIB" = 'No' ] || \
     [ "$REQ32LIB" = 'no' ];then
     require_386lib=no
  fi
fi 

if [ "$require_386lib" = yes ];then
  if [ "$(which dpkg 2>/dev/null)" != '' ];then
    ia32=$(dpkg -l | grep "ia32-libs")
    lib32=$(dpkg -l | grep "lib32stdc++6")

    if [ "$ia32" = '' ] || [ "$lib32" = '' ];then
       apt-get update
    fi

    if [ "$ia32" = '' ];then
       apt-get install ia32-libs
    fi
    lib32=$(dpkg -l | grep "lib32stdc++6")
    if [ "$lib32" = '' ];then
       apt-get install lib32stdc++6
    fi
  fi
  #----------- check Fedor,CentOS,RedHat 64 --------------
  if [ -e /etc/fedora-release ] || [ -e /etc/fedora ] || \
     [ -e /etc/centos-release ] || [ -e /etc/centos ] || \
     [ -e /etc/redhat-release ] || [ -e /etc/redhat ]; then
    lib32=$(rpm -qa| grep glibc | grep i686)
    if [ "$lib32" = "" ];then
      if   [ "$(which yum 2>/dev/null)" != '' ];then
        echo yum install  glibc.i686
        yum install  glibc.i686
        echo yum install  libstdc++.i686
        yum install  libstdc++.i686
      else
        echo dnf install  glibc.i686
        dnf install  glibc.i686
        echo dnf install  libstdc++.i686
        dnf install  libstdc++.i686
      fi
    fi
  fi
fi


DUMMYCUPSYS=0
DUMMYCUPS=0
DUMMYLPD=0
DUMMYLPRNG=0
if ! [ -f /etc/init.d/cupsys ];then
 DUMMYCUPSYS=1
 ln -s /bin/true  /etc/init.d/cupsys
fi

if ! [ -f /etc/init.d/cups ];then
 DUMMYCUPS=1
 ln -s /bin/true  /etc/init.d/cups
fi

if ! [ -f /etc/init.d/lpd ];then
 DUMMYLPD=1
 ln -s /bin/true  /etc/init.d/lpd
fi

if ! [ -f /etc/init.d/lprng ];then
 DUMMYLPRNG=1
 ln -s /bin/true  /etc/init.d/lprng
fi

LPADMIN=lpadmin
LPINFO=lpinfo

if ! [ "$(which $LPADMIN 2> /dev/null)" ];then
   LPADMIN=/usr/sbin/lpadmin
fi

if ! [ "$(which $LPINFO 2> /dev/null)" ];then
  LPINFO=/usr/sbin/lpinfo
fi


mkmodeldir=0
if [ ! -d /usr/share/cups/model ];then
  mkdir -p /usr/share/cups/model
  mkmodeldir=1
fi


if [ "$PREPKGCMDL" != '' ];then
  echo  $PREPKGCMDL
  $PREPKGCMDL
fi
if [ "$PREPKGCMDC" != '' ];then
  echo  $PREPKGCMDC
  $PREPKGCMDC  
fi
if [ "$PREPKGCMDP" != '' ];then
  echo  $PREPKGCMDP
  $PREPKGCMDP
fi


if [ "$PKG" = deb ];then
  cleanup_deb_cups_pkg

  # for Ubuntu 11.04
  debfile=$(echo $LPRFILE | sed s/\.i386.deb/a\.i386.deb/g)
  mkdir -p $wkdir/$packdir

  if [ "$LPRFILE" != '' ];then

    cp $basedir/$LPRFILE $wkdir/$packdir
    cd $wkdir/$packdir

    dpkg-deb -e $LPRFILE  DEBIAN
    dpkg -x $LPRFILE  ./

    cat DEBIAN/control \
	   | sed s/Depends.*$//g \
           | tr -s '\n' \
	   > DEBIAN/control.tmp

    mv -f DEBIAN/control.tmp DEBIAN/control

    rm -f $LPRFILE   2> /dev/null
    rm -fR usr/share/doc/*   2> /dev/null
    LPRFILE=$debfile

    cd $wkdir
    dpkg -b ./$packdir $debfile
    echo dpkg -b ./$packdir $debfile

    rm -fR $wkdir/$packdir/*    2> /dev/null
  fi

  if [ "$CUPSFILE" != '' ];then
    debfile=$(echo $CUPSFILE | sed s/\.i386.deb/a\.i386.deb/g)
  
    cp $basedir/$CUPSFILE $wkdir/$packdir
    cd $wkdir/$packdir

    dpkg-deb -e $CUPSFILE  DEBIAN
    dpkg -x $CUPSFILE  ./

    cat DEBIAN/control \
	   | sed s/Depends.*$//g \
           | tr -s '\n' \
	   > DEBIAN/control.tmp

    mv -f DEBIAN/control.tmp DEBIAN/control

    rm -f $CUPSFILE   2> /dev/null
    rm -fR usr/share/doc/*   2> /dev/null
    cd $wkdir

    dpkg -b ./$packdir $debfile
    echo dpkg -b ./$packdir $debfile
    CUPSFILE=$debfile
    rm -fR $wkdir/$packdir   2> /dev/null
  fi

  if [ "$PDRVFILE" != '' ];then
    debfile=$(echo $PDRVFILE | sed s/\.i386.deb/a\.i386.deb/g)
  
    cp $basedir/$PDRVFILE $wkdir/$packdir
    cd $wkdir/$packdir

    dpkg-deb -e $PDRVFILE  DEBIAN
    dpkg -x $PDRVFILE  ./

    cat DEBIAN/control \
	   | sed s/Depends.*$//g \
           | tr -s '\n' \
	   > DEBIAN/control.tmp

    mv -f DEBIAN/control.tmp DEBIAN/control

    rm -f $PDRVFILE   2> /dev/null
    rm -fR usr/share/doc/*   2> /dev/null
    cd $wkdir

    dpkg -b ./$packdir $debfile
    echo dpkg -b ./$packdir $debfile
    PDRVFILE=$debfile
    rm -fR $wkdir/$packdir   2> /dev/null
  fi


  if [ "$CUPSFILE" != '' ];then
    mv $wkdir/$CUPSFILE   $basedir
  fi
  if [ "$LPRFILE" != '' ];then
    mv $wkdir/$LPRFILE    $basedir
  fi
  if [ "$PDRVFILE" != '' ];then
    mv $wkdir/$PDRVFILE   $basedir
  fi
fi

cd $basedir

if [ "$DEBUG_NOINSTALL" != 'yes' ];then
  if [ "$LPRFILE" != '' ];then
    echo -n -e $COLOR4
    echo $PKGCMD  $LPRFILE
    echo -n -e $MONO
    $PKGCMD  $LPRFILE
  fi

  if [ "$CUPSFILE" != '' ];then
    echo -n -e $COLOR4
    echo $PKGCMD  $CUPSFILE 
    echo -n -e $MONO
    $PKGCMD  $CUPSFILE  |  tee /tmp/brother_linux_brprinter_installer.tmp
    echo -n -e $MONO
  fi

  if [ "$PDRVFILE" != '' ];then
    echo -n -e $COLOR4
    echo $PKGCMD  $PDRVFILE 
    echo -n -e $MONO
    $PKGCMD  $PDRVFILE  |  tee /tmp/brother_linux_brprinter_installer.tmp
    echo -n -e $MONO
  fi
else
  echo -n -e $COLOR4
  if [ "$LPRFILE" != '' ];then
    echo $PKGCMD  $LPRFILE
  fi
  sleep 1
  if [ "$CUPSFILE" != '' ];then
    echo $PKGCMD  $CUPSFILE 
  fi
  sleep 1
  if [ "$PDRVFILE" != '' ];then
    echo $PKGCMD  $PDRVFILE 
  fi

  echo -n -e $MONO
fi
install_done=yes

#if [ "$PKG" = deb ];then
#  rm  -f $LPRFILE   2> /dev/null
#  rm  -f $CUPSFILE   2> /dev/null
#fi


if [ -f /tmp/brother_linux_brprinter_installer.tmp ];then
  csherr=$(cat /tmp/brother_linux_brprinter_installer.tmp | \
        grep 'ERROR: csh is required') 

  if [ "$csherr" != "" ];then
    echo -e -n $COLOR
    echo $MESSAGE250
    echo -e $MONO
    #DBG_MSG  "exit 19"
    exit 0
  fi
fi


#wait for installation end
RAWINSTALLED=yes
if [ "$PRINTERNAME" != UNKNOWN ];then
  retry='0'
  if [ "$DEBUG_NOINSTALL" != 'yes' ];then
    while [ ! -f /etc/cups/ppd/"$PRINTERNAME".ppd ] && [ "$retry" -le $TIMEOUT ] ;do
     sleep 1
     retry=$(($retry+1))
     echo  -n \# 
    done
    if [ -f /etc/cups/ppd/"$PRINTERNAME".ppd ];then
       RAWINSTALLED=no
    fi
  else
    sleep 1
  fi
else
  retry='0'
  if [ "$DEBUG_NOINSTALL" != 'yes' ];then
    while [ $retry -le $TIMEOUT ] ;do
      sleep 1 
      for ppd in $(ls /etc/cups/ppd/*.ppd)
      do
        modelname=$(echo $ppd | sed s/\.ppd//g | sed s/"\/etc\/cups\/"//g)
        modelname2=$(echo $modelname | tr -d '-' | tr "[A-Z]" "[a-z]")
        
        file=$(echo $CUPSFILE | tr -d '-' | tr "[A-Z]" "[a-z]")
        if [ "$(echo $file | grep $modelname2)" != '' ];then
           retry=512
           PRINTERNAME=$(echo $modelname |  tr "[a-z]" "[A-Z]")
           RAWINSTALLED=no
           echo PRINTERNAME=$modelname
           break
        fi
      done 
      retry=$(($retry+1))
      echo -n \#
    done

    if [ "$PRINTERNAME" = UNKNOWN ];then
      
      PRINTERNAME=$(echo $CUPSFILE         | \
	sed s/"^br"//g      		   | \
	sed s/"^cupswrapper"//g		   | \
	sed s/"cupswrapper-.*$"//g	   | \
	sed s/"cupswrapperinch-.*$"//g	   | \
	sed s/"cups-.*$"//g	           | \
	sed s/"-.*$"//g			   | \
	sed s/"_.*$"//g			   | \
	tr "[a-z]" "[A-Z]")
    fi

  else
    sleep 1
  fi
fi

PPDOPT=''
if [ "$RAWINSTALLED" = 'yes' ];then
  for ppd in $(ls /usr/share/ppd/*.ppd /usr/share/cups/model/*.ppd)
  do
    ppd2=$(echo $ppd | tr -d '-')
    prnname=$(echo $PRINTERNAME | tr -d '-')
    if [ "$(echo $ppd2 |  grep -i $prnname)" != '' ];then
       PPDOPT="-P  $ppd"
       break
    fi
  done
fi


echo \#

#------------

if [ "$DUMMYCUPS" = 1 ];then
  if [ "$(ls -al /etc/init.d/cups 2> /dev/null | grep ^l )" != '' ];then
    rm -f /etc/init.d/cups   2> /dev/null
  fi
fi

if [ "$DUMMYCUPSYS" = 1 ];then
  if [ "$(ls -al /etc/init.d/cupsys  2> /dev/null | grep ^l )" != '' ];then
    rm -f /etc/init.d/cupsys   2> /dev/null
  fi
fi

if [ "$DUMMYLPD" = 1 ];then
  if [ "$(ls -al /etc/init.d/lpd  2> /dev/null | grep ^l )" != '' ];then
    rm -f /etc/init.d/lpd   2> /dev/null
  fi
fi

if [ "$DUMMYLPRNG" = 1 ];then
  if [ "$(ls -al /etc/init.d/lprng  2> /dev/null | grep ^l )" != '' ];then
    rm -f /etc/init.d/lprng   2> /dev/null
  fi
fi

#------------



# for SuSE 64
if [ "$arch" != "i386" ];then
  if [ -d "$LIB64FLT" ] && [ -d "$LIBFLT" ] ;then
    filter=$(ls $LIBFLT   2> /dev/null | grep -i $PRINTERNAME | head -n 1  )
    filter64=$(ls $LIB64FLT  2> /dev/null | grep -i $PRINTERNAME | head -n 1 )
    if [ "$filter" != '' ] && [ "$filter64" = '' ];then
      echo cp "$LIBFLT"/$filter   "$LIB64FLT"
      cp "$LIBFLT"/$filter   "$LIB64FLT"
      echo -n -e $COLOR4
      echo $LPADMIN -p $PRINTERNAME -E  $PPDOPT
      echo -n -e $MONO
      $LPADMIN -p $PRINTERNAME -E  $PPDOPT
      rm64filter="rm -f $LIB64FLT/$filter"
    fi
  fi

  if [ -d "$LIB32FLT" ]&& [ -d "$LIBFLT" ] ;then
    filter=$(ls $LIBFLT  2> /dev/null  | grep -i $PRINTERNAME | head -n 1 )
    filter32=$(ls $LIB32FLT  2> /dev/null| grep -i $PRINTERNAME | head -n 1 )
    if [ "$filter" != '' ] && [ "$filter64" = '' ];then
      echo cp "$LIBFLT"/$filter   "$LIB32FLT"
      cp "$LIBFLT"/$filter   "$LIB32FLT"
      echo -n -e $COLOR4
      echo $LPADMIN -p $PRINTERNAME -E  $PPDOPT
      echo -n -e $MONO
      $LPADMIN -p $PRINTERNAME -E  $PPDOPT
      rm32filter="rm -f $LIB64FLT/$filter"
    fi
  fi

fi


## /usr/lib32
LPRPKGNAME=$(echo $LPRFILE       |\
             sed s/"_.*$"//g     |\
             sed s/"-.*$"//g)

pkgpostfix=''

if [ "$PKG" = deb ];then
 if [ "${LPRPKGNAME}" != '' ];then
  if [ "$(dpkg -l | grep ${LPRPKGNAME}:i386)" != '' ];then 
       pkgpostfix=':i386'
  fi
  files=$(dpkg -L "$LPRPKGNAME""$pkgpostfix" | grep '/usr/lib/')
 else
  files=""
 fi
fi


if [ "$PKG" = rpm ];then
 if [ "${LPRPKGNAME}" != '' ];then
  files=$(rpm -q --filesbypkg $LPRPKGNAME | \
	grep '/usr/lib/' | \
	sed s/"$LPRPKGNAME"//g | \
	sed s/' '//g)
 else
  files=""
 fi
fi



#--------------------------------
#    make uninstall script

DBG_MSG "make uninstaller script for printer : uninstaller_${PRINTERNAME}"

uninstaller_prn=uninstaller_${PRINTERNAME}
rm   -f $uninstaller_prn    2> /dev/null
echo "#!  /bin/bash"                              > $uninstaller_prn
echo "#RM_SELINUX_RULE=enable"                    >>$uninstaller_prn


echo "#"                                          >>$uninstaller_prn
echo "#  PRNL=$LPRFILE"                           >>$uninstaller_prn
echo "#  PRNC=$CUPSFILE"                          >>$uninstaller_prn
echo "#  PRNP=$PDRVFILE"                          >>$uninstaller_prn
echo "#  SCAN=$SCANFILE"                          >>$uninstaller_prn
echo "#  SKEY=$SKEYFILE"                          >>$uninstaller_prn
echo "#"                                          >>$uninstaller_prn

for pathlib in $files
do
  pathlib32lib=$(echo $pathlib | \
                 sed s/'\/usr\/lib\/'/'\/usr\/lib32\/'/g)

  if [ -d '/usr/lib32' ];then
     if [ ! -f "$pathlib32lib" ]; then
         if [ "$pathlib" != '' ] && [ "$pathlib32lib" != '' ];then
           echo ln -s $pathlib  $pathlib32lib
	   ln -s $pathlib  $pathlib32lib
	   echo  "rm  -f $pathlib32lib"                  >> $uninstaller_prn
         fi
     fi
  fi
done


## /usr/lib32 symlink


if [ "$files" != '' ];then
  for pathlib in $(ls $(echo "$files"|sed -e s/.so.*$/\*/g))
  do
    if [ -d '/usr/lib32' ];then
      #echo pathlib32lib=$(echo $pathlib | sed -e s/"usr\/lib"/"usr\/lib32"/)
      pathlib32lib=$(echo $pathlib | sed -e s/"usr\/lib"/"usr\/lib32"/)
      if [ ! -f "$pathlib32lib" ]; then
        if [ "$pathlib" != '' ] && [ "$pathlib32lib" != '' ];then
	  echo ln -s $pathlib $pathlib32lib  
	  ln -s $pathlib  $pathlib32lib
	  echo  "rm  -f $pathlib32lib"                   >> $uninstaller_prn
        fi
      fi
    fi
  done
fi

## /lib/lib32 symlink

# AppArmor

if [ "$(which aa-complain  2> /dev/null)" != '' ];then
    echo -e $COLOR$MESSAGE184$MONO          #"AppArmor"
    echo  aa-complain cupsd
    aa-complain cupsd
fi


#  for SELinux

if [ "$(which semanage 2> /dev/null)" = '' ];then
      if   [ "$(which yum 2>/dev/null)" != '' ];then
        echo yum install  policycoreutils-python
        yum install  policycoreutils-python
        echo yum install  policycoreutils
        yum install  policycoreutils
      elif   [ "$(which dnf 2>/dev/null)" != '' ];then
        echo dnf install  policycoreutils-python
        dnf install  policycoreutils-python
        echo dnf install  policycoreutils
        dnf install  policycoreutils
      fi
fi

if [ "$(which semanage 2> /dev/null)" != '' ];then
 
 echo \if [ \"\$RM_SELINUX_RULE\" = \"enable\" ]\;then   >> $uninstaller_prn
 while read rule 
 do 
  if [ "$rule" != '' ];then
   sedir=$(echo $rule | \
           sed s/"^.*'\/"/"\/"/g | \
           sed s/"\/(.*$"//g     |\
           sed s/"(.*$"//g       |\
           sed s/"'"//g)
   rule2=$(echo $rule | sed s/"'"/""/g)
   rule3=$(echo $rule | sed s/"("/"\("/g | sed s/")"/"\)"/g)
   if [ -d $sedir ]; then
     echo semanage fcontext -a -t $rule2
     semanage fcontext -a -t $rule2
     echo "  "echo semanage fcontext -d -t $rule3 >> $uninstaller_prn
     echo "  "semanage fcontext -d -t $rule3      >> $uninstaller_prn
     echo restorecon -R $sedir
     restorecon -R $sedir
     echo "  "echo restorecon -R $sedir             >> $uninstaller_prn
     echo "  "restorecon -R $sedir                  >> $uninstaller_prn
   fi
  fi
 done  << %%selinux_rules%%

cupsd_rw_etc_t '/usr/local/Brother/Printer/(.*/)?inf(/.*)?'
bin_t          '/usr/local/Brother/Printer/(.*/)?inf/brprintconf(.*)?'
bin_t          '/usr/local/Brother/Printer/(.*/)?lpd(/.*)?'
bin_t          '/usr/local/Brother/Printer/(.*/)?cupswrapper(/.*)?'

bin_t          '/usr/local/Brother'
cupsd_rw_etc_t '/usr/local/Brother/inf(/.*)?'
bin_t          '/usr/local/Brother/lpd(/.*)?'
bin_t          '/usr/local/Brother/cupswrapper(/.*)?'

bin_t          '/opt/brother'
cupsd_rw_etc_t '/etc/opt/brother'
cupsd_rw_etc_t '/opt/brother/Printers/(.*/)?inf(/.*)?'
cupsd_rw_etc_t '/etc/opt/brother/Printers/(.*/)?inf(/.*)?'
bin_t          '/opt/brother/Printers/(.*/)?lpd(/.*)?'
bin_t          '/opt/brother/Printers/(.*/)?cupswrapper(/.*)?'


%%selinux_rules%%

  if [ -e $LIBFLT ] ;then
    echo restorecon -RFv $LIBFLT
    restorecon -RFv $LIBFLT
  fi
  if [ -e $LIB32FLT ] ;then
    echo restorecon -RFv $LIB32FLT
    restorecon -RFv $LIB32FLT
  fi
  if [ -e $LIB64FLT ] ;then
    echo restorecon -RFv $LIB64FLT
    restorecon -RFv $LIB64FLT
  fi
  echo  setsebool -P cups_execmem 1
  setsebool -P cups_execmem 1
  echo  "  echo setsebool -P cups_execmem 0"  >> $uninstaller_prn
  echo  "  setsebool -P cups_execmem 0"       >> $uninstaller_prn

 echo fi    >> $uninstaller_prn

fi


#if [ "$(which setenforce  2> /dev/null)" != '' ];then
#   echo -e $COLOR$MESSAGE182$MONO          #"SELinux"
#   echo setenforce 0
#   setenforce 0
#fi 


## Configure Device URI

if [ "$RAWINSTALLED" = no ];then
  echo -e -n $COLOR$MESSAGE190 #"Will you specify the Device URI\? [y/N] ->"
  read answer
  echo -e $MONO
else
  answer=Y
fi

if [ "$answer" != n ] && [ "$answer" != N ]; then
  duri=$($LPINFO -v  | sed s/'^.* '//g  | \
                       grep -v 'brserial_' | grep -v 'brusb_')
  i=0
  echo -e $COLOR4

  autodurin=""
  for deviceuri in $duri
  do
    prnn2=$(echo $PRINTERNAME | tr -d '-' | tr "[A-Z]" "[a-z]")
    duri2=$(echo $deviceuri   | tr -d '-' | tr "[A-Z]" "[a-z]")
    if [ "$(echo $duri2 | grep 'usb://brother' |grep $prnn2 2>/dev/null )" \
               != '' ];then
      autodurin=$i
      autoduris=$deviceuri
      break
    else
      i=$(($i+1))
    fi
  done

  if [ "$autodurin" = '' ];then
    i=0
    for deviceuri in $duri
    do
      prnn2=$(echo $PRINTERNAME | tr -d '-' | tr "[A-Z]" "[a-z]")
      duri2=$(echo $deviceuri   | tr -d '-' | tr "[A-Z]" "[a-z]")
      if [ "$(echo $duri2  | grep  $prnn2 2>/dev/null)" != '' ];then
        autodurin=$i
        autoduris=$deviceuri
        break
      else
        i=$(($i+1))
      fi
    done
  fi

  if [ "$autodurin" = '' ];then
    i=0
    for deviceuri in $duri
    do
      prnn2=$(echo $PRINTERNAME | tr -d '-' | tr "[A-Z]" "[a-z]")
      duri2=$(echo $deviceuri   | tr -d '-' | tr "[A-Z]" "[a-z]")
      if [ "$(echo $duri2  | grep  'usb://brother' 2>/dev/null)" != '' ];then
        autodurin=$i
        autoduris=$deviceuri
      else
        i=$(($i+1))
      fi
    done
  fi

  if [ "$autoduris" = '' ];then
    autoduris='usb://dev/usblp0'
  fi 

  i=0
  for deviceuri in $duri
  do
    echo $i: $deviceuri
    i=$(($i+1))
  done
  echo -e  $i "(I)": $MESSAGE200   #"Specify IP address."
  i=$(($i+1))
  echo -e  $i "(A)": $MESSAGE201 "("$autoduris")"  #"Auto."
  echo -e $MONO

  echo -e -n  $COLOR$MESSAGE210       #"select the number of distination Device URI. ->"
  read answer
  echo -e $MONO

  if [ "$answer" = "$((i-1))" ] || \
     [ "$answer" = 'IP' ] || \
     [ "$answer" = 'ip' ] || \
     [ "$answer" = 'Ip' ] || \
     [ "$answer" = 'i' ] || \
     [ "$answer" = 'I' ];then
    echo -e -n $COLOR$MESSAGE220          #"  enter IP address ->"
    read ipadrs
    echo -n -e $COLOR4
    echo $LPADMIN -p $PRINTERNAME -v socket://$ipadrs -E   $PPDOPT
    echo -e -n $MONO
    $LPADMIN -p $PRINTERNAME -v socket://$ipadrs -E    $PPDOPT
    deviceuri=socket://$ipadrs
  elif [ "$answer" = "$i" ] || \
       [ "$answer" = 'A' ]        || \
       [ "$answer" = 'a' ]        || \
       [ "$answer" = 'Auto' ]     || \
       [ "$answer" = '' ] ;then
    echo -n -e $COLOR4
    echo $LPADMIN -p $PRINTERNAME -v $autoduris -E   $PPDOPT
    echo -n -e $MONO
    $LPADMIN -p $PRINTERNAME -v $autoduris -E   $PPDOPT
    deviceuri=$autoduris
  elif [ "$answer" = 'F' ] || [ "$answer" = 'f' ];then
    echo -n -e $COLOR4
    echo $LPADMIN -p $PRINTERNAME -v file:///tmp/printdata.prn -E    $PPDOPT
    echo -n -e $MONO
    $LPADMIN -p $PRINTERNAME -v file:///tmp/printdata.prn -E    $PPDOPT
    deviceuri="file:///tmp/printdata.prn"
  else
   i=0
   for deviceuri in $duri
   do
     if [ "$i" = "$answer" ];then
       echo -e -n $COLOR4
       echo $LPADMIN -p $PRINTERNAME -v $deviceuri -E    $PPDOPT
       echo -e -n $MONO
       $LPADMIN -p $PRINTERNAME -v $deviceuri -E    $PPDOPT
       break
     fi
     i=$(($i+1))
   done
  fi
elif [ "$answer" = "file" ] || [ "$answer" = "File" ]; then
    echo -e -n $COLOR4
    echo $LPADMIN -p $PRINTERNAME -v file:///tmp/printdata.prn -E    $PPDOPT
    echo -e -n $MONO
    $LPADMIN -p $PRINTERNAME -v file:///tmp/printdata.prn -E    $PPDOPT
fi

if [ "${modelnhuc}" = 'FAX' ];then
  if [ -e /usr/lib/cups/filter/brfaxfilter ];then
    chmod 755 /usr/lib/cups/filter/brfaxfilter
  fi

  if [ -e /usr/lib32/cups/filter ];then
    if [ ! -e /usr/lib32/cups/filter/brfaxfilter ];then
      cp /usr/lib/cups/filter/brfaxfilter /usr/lib32/cups/filter/brfaxfilter
    fi
    chmod 755 /usr/lib32/cups/filter/brfaxfilter
  fi
  if [ -e /usr/lib64/cups/filter ];then
    if [ ! -e /usr/lib64/cups/filter/brfaxfilter ];then
      cp /usr/lib/cups/filter/brfaxfilter /usr/lib64/cups/filter/brfaxfilter
    fi
    chmod 755 /usr/lib64/cups/filter/brfaxfilter
  fi

  if [ -f /etc/init.d/cups ];then
     /etc/init.d/cups restart
  elif [ -f /etc/init.d/cupsys ];then
     /etc/init.d/cupsys restart
  else 
     service cups restart
  fi

fi




socketdevice=$(echo "$deviceuri" | grep "socket:")

if [ -n "$socketdevice" ] && [ "$ipadrs" = '' ];then
    ipadrs=$(echo $socketdevice | sed s/"socket:\/\/"//g  | sed s/":.*$"//g)
fi

echo -e -n $COLOR$MESSAGE230         #"Test Print \? [y/N]. ->"
read answer
echo -e $MONO

if [ "$answer" = Y ] || [ "$answer" = y ]; then
  echo  wait 5s.
  sleep 5

  if [ -f $TESTPRINT ];then
    echo lpr  -P $PRINTERNAME $TESTPRINT
    lpr  -P "$PRINTERNAME" "$TESTPRINT"
  elif [ -f $TESTPRINT2 ];then
    echo lpr  -P $PRINTERNAME $TESTPRINT2
    lpr  -P "$PRINTERNAME" "$TESTPRINT2"
  else
    echo "echo $PRINTERNAME \| lpr  -P $PRINTERNAME"
    echo "$PRINTERNAME" | lpr  -P "$PRINTERNAME"
  fi
fi

# Make uninstaller   : daemon symlink

LPRPKGNAME=$(echo $LPRFILE       |\
             sed s/"_.*$"//g     |\
             sed s/"-.*$"//g)
CUPSPKGNAME=$(echo $CUPSFILE    |\
             sed s/"_.*$"//g     |\
             sed s/"-.*$"//g)
PDRVPKGNAME=$(echo $PDRVFILE    |\
             sed s/"_.*$"//g     |\
             sed s/"-.*$"//g)






echo "if ! [ -f /etc/init.d/cupsys ];then"           >>$uninstaller_prn
echo " DUMMYCUPSYS=1"                                >>$uninstaller_prn
echo " ln -s /bin/true  /etc/init.d/cupsys"          >>$uninstaller_prn
echo "fi"                                            >>$uninstaller_prn

echo "if ! [ -f /etc/init.d/cups ];then"             >>$uninstaller_prn
echo " DUMMYCUPS=1"                                  >>$uninstaller_prn
echo " ln -s /bin/true  /etc/init.d/cups"            >>$uninstaller_prn
echo "fi"                                            >>$uninstaller_prn

echo "if ! [ -f /etc/init.d/lpd ];then"              >>$uninstaller_prn
echo " DUMMYLPD=1"                                   >>$uninstaller_prn
echo " ln -s /bin/true  /etc/init.d/lpd"             >>$uninstaller_prn
echo "fi"                                            >>$uninstaller_prn

echo "if ! [ -f /etc/init.d/lprng ];then"            >>$uninstaller_prn
echo " DUMMYLPRNG=1"                                 >>$uninstaller_prn
echo " ln -s /bin/true  /etc/init.d/lprng"           >>$uninstaller_prn
echo "fi"                                            >>$uninstaller_prn




#
#rm cupswrapper driver
if [ "$CUPSPKGNAME" != '' ];then
  echo "$PREPKGCMDC"                                   >>$uninstaller_prn
  echo "$RMPKGCMD    $CUPSPKGNAME""$pkgpostfix"        >>$uninstaller_prn
fi
#
#rm lpd driver
if [ "$LPRPKGNAME" != '' ];then
  echo "$PREPKGCMDL"                                   >>$uninstaller_prn
  echo "$RMPKGCMD    $LPRPKGNAME""$pkgpostfix"         >>$uninstaller_prn
fi

#rm pdrv driver
if [ "$PDRVPKGNAME" != '' ];then
  echo "$PREPKGCMDP"                                   >>$uninstaller_prn
  echo "$RMPKGCMD    $PDRVPKGNAME""$pkgpostfix"         >>$uninstaller_prn
fi



if [ "$DUMMYCUPS" = 1 ]   || \
   [ "$DUMMYCUPSYS" = 1 ] || \
   [ "$DUMMYLPD" = 1 ]    || \
   [ "$DUMMYLPRNG" = 1 ];then


  echo 'if [ "$DUMMYCUPS" = 1 ];then'                  >>$uninstaller_prn
  echo '  lsc=$(ls -al /etc/init.d/cups  2> /dev/null| grep ^l)'   >>$uninstaller_prn
  echo '  if [ "$lsc" != "" ];then'                    >>$uninstaller_prn
  echo '    rm -f /etc/init.d/cups'                    >>$uninstaller_prn
  echo '  fi'                                          >>$uninstaller_prn
  echo 'fi'                                            >>$uninstaller_prn
  echo ''                                              >>$uninstaller_prn

  echo 'if [ "$DUMMYCUPSYS" = 1 ];then'                >>$uninstaller_prn
  echo '  lsc=$(ls -al /etc/init.d/cupsys  2> /dev/null| grep ^l)' >>$uninstaller_prn
  echo '  if [ "$lsc" != "" ];then'                    >>$uninstaller_prn
  echo '    rm -f /etc/init.d/cupsys'                  >>$uninstaller_prn
  echo '  fi'                                          >>$uninstaller_prn
  echo 'fi'                                            >>$uninstaller_prn
  echo ''                                              >>$uninstaller_prn

  echo 'if [ "$DUMMYLPD" = 1 ];then'                   >>$uninstaller_prn
  echo '  lsc=$(ls -al /etc/init.d/lpd  2> /dev/null | grep ^l)'   >>$uninstaller_prn
  echo '  if [ "$lsc" != "" ];then'                    >>$uninstaller_prn
  echo '    rm -f /etc/init.d/lpd'                     >>$uninstaller_prn
  echo '  fi'                                          >>$uninstaller_prn
  echo 'fi'                                            >>$uninstaller_prn
  echo ''                                              >>$uninstaller_prn

  echo 'if [ "$DUMMYLPRNG" = 1 ];then'                 >>$uninstaller_prn
  echo '  lsc=$(ls -al /etc/init.d/lprng | grep ^l)'   >>$uninstaller_prn
  echo '  if [ "$lsc" != "" ];then'                    >>$uninstaller_prn
  echo '    rm -f /etc/init.d/lprng'                   >>$uninstaller_prn
  echo '  fi'                                          >>$uninstaller_prn
  echo 'fi'                                            >>$uninstaller_prn


  echo  $rm32filter                                    >>$uninstaller_prn
  echo  $rm64filter                                    >>$uninstaller_prn

fi 


if [ "$SCAN" != '' ];then
  echo $SCAN
fi

if [ "$SKEY" != '' ];then
  echo $SKEY
fi

chmod 744 $uninstaller_prn

pre_proc
scanner_install          #    scanner
post_proc

if [ "$1" = '' ];then
  echo -e -n $COLOR$MESSAGE240$MONO    #"Hit Return/Enter Key"
  read answer
fi
#DBG_MSG  "exit 20"
exit 0
